<!DOCTYPE html>
<html>
<head>
    <title>Lookback Test</title>
    <!--  (c) 2016 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Thu Oct 20 2016 09:56:40 GMT-0600 (MDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Thu Oct 20 2016 09:56:40 GMT-0600 (MDT)";
        var BUILDER = "kcorkan";
        var CHECKSUM = 7198390406;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350,
    
    informationalConfig: null,
    
    items: [{xtype:'container', itemId:'information' }],
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/var BUILDER = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
       
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
   
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    var stored_checksum = me._generateChecksum(text);
                    if ( CHECKSUM !== stored_checksum ) {
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    _addToContainer: function(container){
        var config = Ext.apply({
            xtype:'container',
            height: 200,
            overflowY: true
        }, this.informationalConfig);
        
        container.add(config);
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if ( !Ext.isEmpty( this.informationalConfig ) ) {
            var container = this.down('#information');
            this._addToContainer(container);
            
        }
        
        if (! app.isExternal() ) {
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            dock: 'bottom',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml,
                doc: 'top'
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            dock:'bottom',
            html:"This app was created by the CA AC Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html: Ext.String.format("Build date/time: {0} ({1})",
                    APP_BUILD_DATE,
                    BUILDER)
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('CArABU.technicalservices.FileUtilities',{
    singleton: true,
    saveCSVToFile:function(csv,file_name,type_object){
        if (type_object === undefined){
            type_object = {type:'text/csv;charset=utf-8'};
        }
        this.saveAs(csv,file_name, type_object);
    },
    saveAs: function(textToWrite, fileName)
    {
        if (Ext.isIE9m){
            Rally.ui.notify.Notifier.showWarning({message: "Export is not supported for IE9 and below."});
            return;
        }

        var textFileAsBlob = null;
        try {
            textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});
        }
        catch(e){
            window.BlobBuilder = window.BlobBuilder ||
                window.WebKitBlobBuilder ||
                window.MozBlobBuilder ||
                window.MSBlobBuilder;
            if (window.BlobBuilder && e.name === 'TypeError'){
                bb = new BlobBuilder();
                bb.append([textToWrite]);
                textFileAsBlob = bb.getBlob("text/plain");
            }

        }

        if (!textFileAsBlob){
            Rally.ui.notify.Notifier.showWarning({message: "Export is not supported for this browser."});
            return;
        }

        var fileNameToSaveAs = fileName;

        if (Ext.isIE10p){
            window.navigator.msSaveOrOpenBlob(textFileAsBlob,fileNameToSaveAs); // Now the user will have the option of clicking the Save button and the Open button.
            return;
        }

        var url = this.createObjectURL(textFileAsBlob);

        if (url){
            var downloadLink = document.createElement("a");
            if ("download" in downloadLink){
                downloadLink.download = fileNameToSaveAs;
            } else {
                //Open the file in a new tab
                downloadLink.target = "_blank";
            }

            downloadLink.innerHTML = "Download File";
            downloadLink.href = url;
            if (!Ext.isChrome){
                // Firefox requires the link to be added to the DOM
                // before it can be clicked.
                downloadLink.onclick = this.destroyClickedElement;
                downloadLink.style.display = "none";
                document.body.appendChild(downloadLink);
            }
            downloadLink.click();
        } else {
            Rally.ui.notify.Notifier.showError({message: "Export is not supported "});
        }
    },
    createObjectURL: function ( file ) {
        if ( window.webkitURL ) {
            return window.webkitURL.createObjectURL( file );
        } else if ( window.URL && window.URL.createObjectURL ) {
            return window.URL.createObjectURL( file );
        } else {
            return null;
        }
    },
    destroyClickedElement: function(event)
    {
        document.body.removeChild(event.target);
    }
});


Ext.define("lookback-test", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),

    integrationHeaders : {
        name : "lookback-test"
    },

    hydrateFields: ['State','ScheduleState'],
    requiredFetch: ['ObjectID','FormattedID','LastUpdateDate'],

    launch: function() {
        this.addComponents();
        //this.compareSnaps();
    },
    addComponents: function(){
        var filters = Rally.data.wsapi.Filter.or([{
            property: 'TypePath',
            operator: 'contains',
            value: 'PortfolioItem/'
        },{
            property: 'TypePath',
            value: 'HierarchicalRequirement'
        },{
            property: 'TypePath',
            value: 'Defect'
        },{
            property: 'TypePath',
            value:'Task'
        }]);

        var def = {
            margin: 5,
            labelAlign: 'right',
            labelWidth: 150,
            width: 300
        };

        var modelPicker = this.add(Ext.apply({
            xtype: 'rallycombobox',
            storeConfig: {
                model: 'TypeDefinition',
                fetch: ['TypePath','DisplayName'],
                filters: filters,
                remoteFilter: true,
                autoLoad: true
            },
            itemId: 'modelPicker',
            fieldLabel: 'Artifact Type',
            valueField: 'TypePath',
            displayField: 'DisplayName'
        },def));

        var fieldPicker = this.add(Ext.apply({
            xtype: 'rallyfieldcombobox',
            multiSelect: true,
            itemId: 'fieldPicker',
            fieldLabel: 'Fields to Compare',
            context: this.getContext()
        },def));
        modelPicker.on('select', this.updateFieldPicker, this);
        modelPicker.on('ready', this.updateFieldPicker, this);

        this.add(Ext.apply({
            xtype: 'rallydatefield',
            maxValue: new Date(),
            value: Rally.util.DateTime.add(new Date(), 'day',-30),
            fieldLabel: 'Last Updated After'
        },def));

        this.add({
            xtype: 'rallybutton',
            text: 'Compare',
            listeners: {
                scope: this,
                click: this.compareSnaps
            },
            margin: '5 160 5 160'
        });

        this.add({
            xtype: 'container',
            itemId: 'displayBox',
            tpl: '<div class="no-data-container"><div class="secondary-message">{message}</div></div>'
        });
    },

    updateFieldPicker: function(){

        var cb = this.down('#modelPicker');

        if (cb && cb.getValue() && this.down('#fieldPicker')){
            this.down('#fieldPicker').refreshWithNewModelType(cb.getValue());
        }

    },
    compareSnaps: function(){
        this.setLoading(true);
        this.down('#displayBox').update({message: 'Fetching data...'});
        Deft.Promise.all([
            this.fetchWsapiRecords({
                model: this.getObjectType(),
                fetch: this.getObjectFetch(),
                filters: this.getObjectFilters(),
                pageSize: 2000,
                limit: Infinity
            }),
            this.fetchSnapshots({
                find: {
                    _TypeHierarchy: this.getObjectType(),
                    __At: "current",
                    _ProjectHierarchy: this.getContext().getProject().ObjectID
                },
                removeUnauthorizedSnapshots: true,
                limit: Infinity,
                fetch: this.getSnapshotFetch(),
                hydrate: this.getHydrate()
            })
        ]).then({
            success: this.showResults,
            failure: this.showError,
            scope: this
        }).always(function(){ this.setLoading(false); }, this);
    },
    showResults: function(results){
        var wsapiResults = results[0],
            snapshots = results[1],
            hash = {};

        this.logger.log('showResults', wsapiResults, snapshots);


        for (var i=0; i<wsapiResults.length; i++){
            hash[wsapiResults[i].get('ObjectID')] = {wsapi: wsapiResults[i].getData(), lookback: null};
        }

        for (var i=0; i<snapshots.length; i++){
            var snap = snapshots[i];
            if (hash[snap.get('ObjectID')]){
                hash[snap.get('ObjectID')].lookback = snap.getData();
            }
        }

        this.logger.log('showResults hash', hash);

        var csv = [],
            fields = this.getExtraFields();
        var headers = ['Issue','ObjectID','FormattedID', 'Wsapi LastUpdateDate','Snapshot _ValidFrom'];
        Ext.Array.each(fields, function(f){
            headers.push('Wsapi ' + f);
            headers.push('Snapshot ' + f);
        });

        csv.push(headers.join(','));
        Ext.Object.each(hash, function(objID, obj){
            var row = [];
            if (obj.wsapi && !obj.lookback){
                row = ['No current snapshot',objID, obj.wsapi.FormattedID, obj.wsapi.LastUpdateDate];
                this.logger.log('No current snapshot',objID, obj.wsapi.FormattedID, obj.wsapi.LastUpdateDate);
            } else {
                var mismatch = false;
                Ext.Array.each(fields, function(f){
                    var wsVal = obj.wsapi[f],
                        snapVal = obj.lookback[f];

                    wsVal = wsVal && wsVal._refObjectName || wsVal;
                    snapVal = snapVal && snapVal._refObjectName || snapVal;
                    
                    if (wsVal != snapVal && wsVal !== null && snapVal !== 0){
                        mismatch = true;
                        return false;
                    }
                });
                if (mismatch){
                    row = ['current snapshot values do not match wsapi', objID, obj.wsapi.FormattedID, obj.wsapi.LastUpdateDate, obj.lookback._ValidFrom];
                    Ext.Array.each(fields, function(f){
                        var wsVal = obj.wsapi[f];
                        row.push(wsVal && wsVal._refObjectName || wsVal);

                        var snapVal = obj.lookback[f];
                        row.push(snapVal && snapVal._refObjectName || snapVal);
                    });
                }
            }
            if (row.length > 0){
                csv.push(row.join(','));
            }
        }, this);
        if (csv.length > 1){
            this.down('#displayBox').update({message: Ext.String.format("{0} conflicts / {1} records found.",csv.length - 1,wsapiResults.length)});
            csv = csv.join('\r\n');
            CArABU.technicalservices.FileUtilities.saveCSVToFile(csv,Ext.String.format('lookback-{0}-{1}.csv', this.getObjectType().replace('/',''), Rally.util.DateTime.format(new Date(), 'Y-m-d')));
        } else {
            this.down('#displayBox').update({message: 'No conflicts found.'});
        }


    },
    showError: function(errorMsg){
        this.down('#displayBox').update({message: errorMsg});
        Rally.ui.notify.Notifier.showError({message: errorMsg});
    },
    fetchWsapiRecords: function(config){
        var deferred = Ext.create('Deft.Deferred');
        this.logger.log('fetchWsapiRecords', config);
        Ext.create('Rally.data.wsapi.Store',config).load({
            callback: function(records, operation){

                if (operation.wasSuccessful()){
                    deferred.resolve(records);
                } else {
                    deferred.reject('Wsapi call failed: ' + operation.error.errors.join(','));
                }
            }
        });

        return deferred;
    },
    fetchSnapshots: function(config){
        var deferred = Ext.create('Deft.Deferred');
        this.logger.log('fetchSnapshots', config);
        Ext.create('Rally.data.lookback.SnapshotStore',config).load({
            callback: function(records, operation){

                if (operation.wasSuccessful()){
                    deferred.resolve(records);
                } else {
                    deferred.reject('Lookback call failed: ' + operation.error.errors.join(','));
                }
            }
        });

        return deferred;
    },
    getHydrate: function(){
        return Ext.Array.intersect(this.getExtraFields(), this.hydrateFields);
    },
    getObjectType: function(){
        return this.down('#modelPicker') && this.down('#modelPicker').getValue();
    },
    getExtraFields: function(){
        return this.down('#fieldPicker') && this.down('#fieldPicker').getValue();
    },
    getObjectFetch: function(){
       return this.requiredFetch.concat(this.getExtraFields());
    },
    getSnapshotFetch: function(){
        return this.getObjectFetch().concat(['_ValidFrom']);
    },
    getAfterDate: function(){
        return this.down('rallydatefield') && this.down('rallydatefield').getValue();
    },
    getObjectFilters: function(){
        if (this.getAfterDate()){
            return [{
                property: 'LastUpdateDate',
                operator: '>',
                value: this.getAfterDate()
            }];
        } else {
            return [];
        }
    },
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        // Ext.apply(this, settings);
        this.launch();
    }
});

            
               Rally.launchApp('lookback-test', {
                   name: 'Lookback Test'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>